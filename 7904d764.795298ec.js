(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{126:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(184)),i=["components"],p={title:"<AvPayerSelect />"},c={unversionedId:"form/select/components/payer-select",id:"form/select/components/payer-select",isDocsHomePage:!1,title:"<AvPayerSelect />",description:"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down.",source:"@site/docs/form/select/components/payer-select.md",slug:"/form/select/components/payer-select",permalink:"/availity-react/form/select/components/payer-select",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/form/select/components/payer-select.md",version:"current",sidebar:"someSidebar",previous:{title:"<AvOrganizationSelect />",permalink:"/availity-react/form/select/components/organization-select"},next:{title:"Getting Started",permalink:"/availity-react/form/upload/index"}},l=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,i);return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A select list that automatically loads and pages through payers for supported transactionTypes when the user scrolls down."),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Form } from '@availity/form';\nimport { AvPayerSelect } from '@availity/select';\nimport { Button } from 'reactstrap';\nimport * as yup from 'yup';\nimport '@availity/yup';\n\nconst Example = () => (\n  <Form\n    initialValues={{\n      organizations: '',\n    }}\n    onSubmit={(values) => apiResource.submit(values)}\n    validationSchema={yup.object().shape({\n      organizations: yup.string().isRequired('This field is required.'),\n    })}\n  >\n    <AvPayerSelect\n      id=\"payers\"\n      name=\"payers\"\n      parameters={{\n        region: 'FL',\n        tranTypeCode: '1',\n      }}\n      customerId=\"12345\"\n    />\n    <Button color=\"primary\" type=\"submit\">\n      Submit\n    </Button>\n  </Form>\n);\n")),Object(o.b)("h4",{id:"live-example-storybook"},"Live example: ",Object(o.b)("a",{parentName:"h4",href:"https://availity.github.io/availity-react/storybook/?path=/story/formik-select-resources--avpayerselect"},"Storybook")),Object(o.b)("h3",{id:"props"},"Props"),Object(o.b)("p",null,"Extends ",Object(o.b)("a",{parentName:"p",href:"/form/select/components/resource-select/#props"},"ResourceSelect Props"),"."),Object(o.b)("h4",{id:"customerid-string"},Object(o.b)("inlineCode",{parentName:"h4"},"customerId: string")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers")," API from ",Object(o.b)("inlineCode",{parentName:"p"},"aries")," requires a ",Object(o.b)("inlineCode",{parentName:"p"},"customerId")," prop that must be a string. The ",Object(o.b)("inlineCode",{parentName:"p"},"AvPayerSelect")," will use the ",Object(o.b)("inlineCode",{parentName:"p"},"customerId")," prop in the request header, X-Availity-Customer-Id, of the ",Object(o.b)("inlineCode",{parentName:"p"},"all")," call to ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers"),". This is necessary for the ",Object(o.b)("inlineCode",{parentName:"p"},"AvPayerSelect")," select to only contain payers that are accesible and related to the organization specified, and not all the organizations that the user belongs."),Object(o.b)("p",null,"Example: customerId: '12345'"),Object(o.b)("h4",{id:"region-string"},Object(o.b)("inlineCode",{parentName:"h4"},"region: string")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers")," API from ",Object(o.b)("inlineCode",{parentName:"p"},"aries")," requires a ",Object(o.b)("inlineCode",{parentName:"p"},"state")," param that must be a string. When ",Object(o.b)("inlineCode",{parentName:"p"},"AvPayerSelect")," has a ",Object(o.b)("inlineCode",{parentName:"p"},"region")," prop, then the results of the ",Object(o.b)("inlineCode",{parentName:"p"},"all")," call to ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers")," will be filtered, containing only payers that are accessible from that region. This is necessary for the ",Object(o.b)("inlineCode",{parentName:"p"},"AvPayerSelect")," select to only contain payers for that user's current region in the app, instead of all the payers from every region."),Object(o.b)("p",null,"Example: region: 'FL'"),Object(o.b)("h4",{id:"trantypecode-string"},Object(o.b)("inlineCode",{parentName:"h4"},"tranTypeCode: string")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers")," API from ",Object(o.b)("inlineCode",{parentName:"p"},"aries")," requires a ",Object(o.b)("inlineCode",{parentName:"p"},"tranTypeCode")," prop that must be a string. Currently only the following transaction type codes are supported ",Object(o.b)("inlineCode",{parentName:"p"},"1, 2, 3, 5"),". Additionally ",Object(o.b)("inlineCode",{parentName:"p"},"EBREACT")," has been added to support payer list for E&B react payers. by the backing API. This will be passed as a request param so that the results of the ",Object(o.b)("inlineCode",{parentName:"p"},"all")," call to ",Object(o.b)("inlineCode",{parentName:"p"},"extended-payers")," will be filtered, containing only payers that have either a security resource or EPDM route for the specified transaction type code."),Object(o.b)("p",null,"Example: tranTypeCode: '1'"))}b.isMDXComponent=!0},184:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),u=r,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return n?a.a.createElement(d,p(p({ref:t},l),{},{components:n})):a.a.createElement(d,p({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);