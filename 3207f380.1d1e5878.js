(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{184:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),d=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=d(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=d(a),m=n,u=s["".concat(o,".").concat(m)]||s[m]||p[m]||i;return a?r.a.createElement(u,l(l({ref:t},b),{},{components:a})):r.a.createElement(u,l({ref:t},b))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var b=2;b<i;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},98:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),i=(a(0),a(184)),o=["components"],l={title:"Badge"},c={unversionedId:"components/badge",id:"components/badge",isDocsHomePage:!1,title:"Badge",description:"This library contains specialized Badges, utilizing Reactstrap Badge.",source:"@site/docs/components/badge.mdx",slug:"/components/badge",permalink:"/availity-react/components/badge",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/badge.mdx",version:"current",sidebar:"someSidebar",previous:{title:"PaginationContext",permalink:"/availity-react/components/pagination/context"},next:{title:"Progress",permalink:"/availity-react/components/progress"}},b=[{value:"Installation",id:"installation",children:[]},{value:"Removable Badge",id:"removable-badge",children:[{value:"Example",id:"example",children:[]},{value:"<code>RemovableBadge</code> Props",id:"removablebadge-props",children:[]}]},{value:"Removable Badge List",id:"removable-badge-list",children:[{value:"Example",id:"example-1",children:[]},{value:"<code>RemovableBadgeList</code> Props",id:"removablebadgelist-props",children:[]},{value:"<code>BadgeItem</code> Props",id:"badgeitem-props",children:[]}]}],d={toc:b};function s(e){var t=e.components,a=Object(r.a)(e,o);return Object(i.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This library contains specialized Badges, utilizing Reactstrap Badge."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/badge"},Object(i.b)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/badge.svg?style=for-the-badge",alt:"Version"}))),Object(i.b)("h3",{id:"installation"},"Installation"),Object(i.b)("p",null,"NPM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/badge reactstrap@^8.0.0\n")),Object(i.b)("p",null,"Yarn"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/badge reactstrap@^8.0.0\n")),Object(i.b)("h2",{id:"removable-badge"},"Removable Badge"),Object(i.b)("h3",{id:"example"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport RemovableBadge from '@availity/badge';\n\nconst Example = () => (\n  <RemovableBadge\n    key={badge.value}\n    color={badge.color}\n    value={badge.value}\n    onRemove={remove}\n  >\n    {displayText}\n  </RemovableBadge>\n);\n")),Object(i.b)("h4",{id:"live-example"},"Live example"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/story/components-badge-removable-badge--default"},"Storybook")),Object(i.b)("h3",{id:"removablebadge-props"},Object(i.b)("inlineCode",{parentName:"h3"},"RemovableBadge")," Props"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"<RemovableBadge/>")," contains all of the ",Object(i.b)("inlineCode",{parentName:"p"},"BadgeProp")," from Reactstrap, in addition to the following."),Object(i.b)("h4",{id:"value-string"},Object(i.b)("inlineCode",{parentName:"h4"},"value: string")),Object(i.b)("p",null,"This is a unique value for the badge, which is passed up to the ",Object(i.b)("inlineCode",{parentName:"p"},"onRemove")," function to describe which badge is being removed."),Object(i.b)("h4",{id:"onremove-value-string--void"},Object(i.b)("inlineCode",{parentName:"h4"},"onRemove: (value: string) => void")),Object(i.b)("p",null,"This is the function that is called whenever the 'X' icon is clicked. It passes the value of the specified badge to the parent component."),Object(i.b)("h2",{id:"removable-badge-list"},"Removable Badge List"),Object(i.b)("p",null,"This component allows you to specify a list of badges and handles removing the badge from the badge list."),Object(i.b)("h3",{id:"example-1"},"Example"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport { RemovableBadgeList, BadgeItem } from '@availity/badge';\n\nconst Example = () => {\n  const defaultBadgeList: BadgeItem[] = [\n    { value: '1', color: 'primary', displayText: 'Test 1' },\n    { value: '2', color: 'success', displayText: 'Test 2' },\n    { value: '3', color: 'danger', displayText: 'Test 3' },\n    { value: '4', color: 'warning', displayText: 'Test 4' },\n    { value: '5', color: 'info', displayText: 'Test 5' },\n    { value: '6', color: 'light', displayText: 'Test 6' },\n    { value: '7', color: 'dark', displayText: 'Test 7' },\n    { value: '8', displayText: 'Test 9' },\n  ];\n  const [badgeList, setBadgeList] = useState<BadgeItem[]>(defaultBadgeList);\n\n  const remove = () => {\n    setBadgeList(defaultBadgeList);\n  };\n\n  const onRemoveBadge = (badgeList: BadgeItem[]) => {\n    setBadgeList(badgeList);\n  };\n\n  return <RemovableBadgeList badges={badgeList} onRemove={onRemoveBadge} />;\n};\n")),Object(i.b)("h3",{id:"removablebadgelist-props"},Object(i.b)("inlineCode",{parentName:"h3"},"RemovableBadgeList")," Props"),Object(i.b)("h4",{id:"onremove-badges-badgeitem--void"},Object(i.b)("inlineCode",{parentName:"h4"},"onRemove: (badges: BadgeItem[]) => void")),Object(i.b)("p",null,"This is the function that is called whenever a badge in the list has been removed. It passes in the current badge list, after the badge has been removed."),Object(i.b)("h3",{id:"badgeitem-props"},Object(i.b)("inlineCode",{parentName:"h3"},"BadgeItem")," Props"),Object(i.b)("h4",{id:"value-string-1"},Object(i.b)("inlineCode",{parentName:"h4"},"value: string")),Object(i.b)("p",null,"This is a unique value for the badge, which is passed up to the ",Object(i.b)("inlineCode",{parentName:"p"},"onRemove")," function to describe which badge is being removed."),Object(i.b)("h4",{id:"displaytext-string"},Object(i.b)("inlineCode",{parentName:"h4"},"displayText: string")),Object(i.b)("p",null,"This is the text that will be displayed in the badge."),Object(i.b)("h4",{id:"color-string"},Object(i.b)("inlineCode",{parentName:"h4"},"color: string")),Object(i.b)("p",null,"The color of the badge. Refer to the Reactstrap documentation to determine which colors are available."),Object(i.b)("h4",{id:"order-number"},Object(i.b)("inlineCode",{parentName:"h4"},"order: number")),Object(i.b)("p",null,"Optionally display the badges in a specified order."))}s.isMDXComponent=!0}}]);